gw_data <- fread('Webinar-5-30-2018/raw_data/NWISWellsCONUSGISAttrib.txt')
library(data.table)
gw_data <- fread('Webinar-5-30-2018/raw_data/NWISWellsCONUSGISAttrib.txt')
# Look at data as read.table interpreted it and see if that looks correct.
str(gw_data)
# The SITE_NO column should be interpreted as "character" not "integer", and dates
#   will be handled after they are read in.
gw_data <- fread('Webinar-5-30-2018/raw_data/NWISWellsCONUSGISAttrib.txt',
colClasses = c(SITE_NO = "character"))
head(gw_data$SITE_NO)
# dplyr::mutate creates a new column (or overwrites a column if you have name it the same)
as.Date("2010-10-01")
str(gw_data)
gw_data <- gw_data %>% mutate(DATES = as.Date(DATES))
library(dplyr)
gw_data <- gw_data %>% mutate(DATES = as.Date(DATES))
str(gw_data)
gw_data_excel <- fread('Webinar-5-30-2018/raw_data/DataSample.txt',
colClasses = c(SITE_NO = "character"))
head(gw_data_excel$DATES)
test_date <- gw_data_excel$DATES[1]
test_date
as.Date(test_date)
?as.Date # The `format` function will help us tell R how to interpret our date
?strptime
as.Date(test_date, format = "%m/%d/%Y") # Specify the format of our date using appropriate symbols
# Using `dplyr::mutate` and `as.Date`, we can convert the date column into a date class
gw_data_excel <- gw_data_excel %>% mutate(DATES = as.Date(DATES, format = "%m/%d/%Y"))
head(gw_data_excel$DATES)
as.Date("1/18/2018")
as.Date("1/18/18")
library(tidyr)
gw_data <- fread('Webinar-5-30-2018/raw_data/NWISWellsCONUSGISAttrib.txt',
colClasses = c(SITE_NO = "character")) %>%
mutate(DATES = as.Date(DATES))
# First, find median well depth for public supply wells.
# Use filter to get only public supply data, then calculate the median.
public_supply_data <- gw_data %>% filter(WATER_USE_1_CD == "P")
public_supply_data$WELL_DEPTH_VA
p_med_depth <- median(public_supply_data$WELL_DEPTH_VA, na.rm = TRUE)
p_med_depth
domestic_data
# Second, find median well depth for domestic wells.
# Use filter to get only domestic data, then calculate the median.
domestic_data <- gw_data %>% filter(WATER_USE_1_CD == "H")
h_med_depth <- median(domestic_data$WELL_DEPTH_VA, na.rm = TRUE)
h_med_depth
# Based on this data, a good cutoff for the shallow vs deep is 220 feet
# (can average the two medians to get that)
aq_dividing_depth <- signif(mean(c(p_med_depth, h_med_depth)), digits = 2)
aq_dividing_depth
gw_data <- gw_data %>%
mutate(Aquifer_Zone = case_when(
WELL_DEPTH_VA <= 220 ~ "shallow",
WELL_DEPTH_VA > 220 ~ "deep"
))
head(gw_data)
unique(gw_data$Aquifer_Zone)
df <- data.frame(
site_no = c("site1", "site2", "site3"),
date = c("2009-10-02", "1998-01-27", "2014-10-12"),
`1974_LU21` = c(0, 0, 20),
`1974_LU22` = c(10, 0, 30),
`1974_LU43` = c(0, 50, 0),
`1974_LU44` = c(0, 10, 20),
`2012_LU21` = c(20, 30, 30),
`2012_LU22` = c(20, 0, 40),
`2012_LU43` = c(0, 40, 0),
`2012_LU44` = c(0, 0, 20)
)
View(df)
df_desired <- data.frame(
site_no = c("site1", "site2", "site3"),
date = c("2009-10-02", "1998-01-27", "2014-10-12"),
`1974_developed` = c(10, 0, 50),
`1974_agriculture` = c(0, 60, 30),
`2012_developed` = c(40, 30, 70),
`2012_agriculture` = c(0, 40, 20)
)
View(df_desired)
df %>%
gather(key = Landuse_category, value = Landuse_value, contains("LU"))
# what I did
df_long <- df %>%
gather(key = Landuse_category, value = Landuse_value, contains("LU")) %>%
separate(Landuse_category, c("Landuse_year", "Landuse_category"), "_")
df_long
df_long %>%
spread(key = Landuse_category, value = Landuse_value)
df_aggr <- df_long %>%
spread(key = Landuse_category, value = Landuse_value) %>%
mutate(developed = LU21 + LU22,
agriculture = LU43 + LU44)
df_aggr
df_aggr %>%
mutate(YEAR = format(as.Date(date), "%Y"))
df_aggr %>%
mutate(YEAR = format(as.Date(date), "%Y")) %>%
select(-starts_with("LU"))
df_aggr %>%
mutate(YEAR = format(as.Date(date), "%Y")) %>%
select(-starts_with("LU")) %>%
gather(Landuse_aggr, Landuse_aggr_value, one_of("developed", "agriculture"))
df_aggr %>%
mutate(YEAR = format(as.Date(date), "%Y")) %>%
select(-starts_with("LU")) %>%
gather(Landuse_aggr, Landuse_aggr_value, one_of("developed", "agriculture")) %>%
mutate(Landuse_year = gsub("X","",Landuse_year))
df_aggr %>%
mutate(YEAR = format(as.Date(date), "%Y")) %>%
select(-starts_with("LU")) %>%
gather(Landuse_aggr, Landuse_aggr_value, one_of("developed", "agriculture")) %>%
mutate(Landuse_year = gsub("X","",Landuse_year)) %>%
mutate(Landuse_aggr_value = ifelse(YEAR < Landuse_year, NA, Landuse_aggr_value))
df_lu_insert_missing <- df_aggr %>%
mutate(YEAR = format(as.Date(date), "%Y")) %>%
select(-starts_with("LU")) %>%
gather(Landuse_aggr, Landuse_aggr_value, one_of("developed", "agriculture")) %>%
mutate(Landuse_year = gsub("X","",Landuse_year)) %>%
mutate(Landuse_aggr_value = ifelse(YEAR < Landuse_year, NA, Landuse_aggr_value))
df_lu_insert_missing <- df_aggr %>%
mutate(YEAR = format(as.Date(date), "%Y")) %>%
select(-starts_with("LU")) %>%
gather(Landuse_aggr, Landuse_aggr_value, one_of("developed", "agriculture")) %>%
mutate(Landuse_year = gsub("X","",Landuse_year)) %>%
mutate(Landuse_aggr_value = ifelse(YEAR < Landuse_year, NA, Landuse_aggr_value))
df_lu_insert_missing %>%
unite(Landuse_aggr_yr, Landuse_year, Landuse_aggr)
df_lu_insert_missing %>%
unite(Landuse_aggr_yr, Landuse_year, Landuse_aggr) %>%
spread(key = Landuse_aggr_yr, value = Landuse_aggr_value)
df_result <- df_lu_insert_missing %>%
unite(Landuse_aggr_yr, Landuse_year, Landuse_aggr) %>%
spread(key = Landuse_aggr_yr, value = Landuse_aggr_value)
gw_data <- fread('Webinar-5-30-2018/raw_data/NWISWellsCONUSGISAttrib.txt',
colClasses = c(SITE_NO = "character")) %>%
mutate(DATES = as.Date(DATES))
gw_data <- gw_data %>%
mutate(Aquifer_Zone = case_when(
WELL_DEPTH_VA <= 220 ~ "shallow",
WELL_DEPTH_VA > 220 ~ "deep"
))
gw_data_long <- gw_data %>%
gather(key = Landuse_category, value = Landuse_value, contains("LU")) %>%
separate(Landuse_category, c("Landuse_year", "Landuse_category"), "_")
head(gw_data_long)
gw_data_aggr <- gw_data_long %>%
spread(key = Landuse_category, value = Landuse_value) %>%
mutate(developed = LU21 + LU22 + LU23 + LU24 + LU25 + LU26 + LU27,
semideveloped = LU31 + LU32 + LU33,
agricultural = LU43 + LU44 + LU45, # LU46 doesn't exist in this dataset
lowusage = LU50 + LU60) %>%
select(-starts_with("LU")) # now remove unaggregated columns
head(gw_data_aggr)
round(
gw_data_corrected_lu <- gw_data_aggr %>%
gather(Landuse_aggr, Landuse_aggr_value, one_of("developed", "semideveloped",
"agricultural", "lowusage")) %>%
mutate(Landuse_aggr_value = ifelse(format(DATES, "%Y") < Landuse_year,
yes = NA, no = Landuse_aggr_value))
head(gw_data_corrected_lu)
gw_data_lu <- gw_data_corrected_lu %>%
unite(Landuse_aggr_yr, Landuse_year, Landuse_aggr) %>%
spread(key = Landuse_aggr_yr, value = Landuse_aggr_value)
head(gw_data_lu)
# Saving as rds so I can easily read it in later with column classes still intact
saveRDS(gw_data_lu, "Webinar-5-30-2018/cache_data/NWISWellsCONUSGISAttrib_AggrLanduse.rds")
# Read in cached data from `R/clean_data`
gw_data_lu <- readRDS("Webinar-5-30-2018/cache_data/NWISWellsCONUSGISAttrib_AggrLanduse.rds")
mean_no3_no2 <- gw_data_lu %>%
group_by(WATER_USE_1_CD) %>%
summarize(mean_no3_no2 = mean(P00631, na.rm = TRUE))
mean_no3_no2
sum(c(TRUE, TRUE, FALSE))
summarize_no3_no2 <- gw_data_lu %>%
group_by(WATER_USE_1_CD) %>%
summarize(mean_no3_no2 = mean(P00631, na.rm = TRUE),
num_vals = n(),
num_censored = sum(grepl("<", R00631)),
num_missing = sum(is.na(P00631)))
summarize_no3_no2
##### Recode values to be less cryptic #####
# In addition to the summary table, include the real name for the category using recode
nitrate_summary <- summarize_no3_no2 %>%
mutate(WATER_USE_NAME = recode(WATER_USE_1_CD,
P = "Public Supply",
H = "Domestic",
D = "Dewater",
F = "Fire",
R = "Recreation",
.default = "Other"
))
nitrate_summary
?summarize
summarize_no3_no2 <- gw_data_lu %>%
group_by(WATER_USE_1_CD, Aquifer_Zone) %>%
summarize(mean_no3_no2 = mean(P00631, na.rm = TRUE),
num_vals = n(),
num_censored = sum(grepl("<", R00631)),
num_missing = sum(is.na(P00631)))
summarize_no3_no2
